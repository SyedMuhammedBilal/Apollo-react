{"version":3,"sources":["components/LaunchItem.tsx","components/MissionKey.tsx","components/Launches.tsx","components/Launch.tsx","components/Navbar.tsx","components/Header.tsx","components/ShipItem.tsx","components/Ships.tsx","components/DragonItem.tsx","components/Dragons.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","launch_site","static_fire_date_unix","launch_date_unix","ships","className","classNames","format","site_name","to","MissionKey","LAUNCHES_QUERY","gql","Launches","Fragment","query","loading","error","data","console","log","launches","map","key","Component","LAUNCH_QUERY","Launch","id","this","props","match","params","String","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","Navbar","href","Header","data-testid","ShipItem","ship","ship_id","ship_name","weight_lbs","weight_kg","home_port","SHIPS_QUERY","Ships","DragonItem","dragon","name","crew_capacity","DRAGONS_QUERY","Dragons","dragons","client","ApolloClient","uri","App","exact","path","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7a24975b.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom'\n\ntype Props = {\n  launch: any\n}\n\nconst LaunchItem: React.FC<Props> = ({ launch: { flight_number, mission_name, launch_date_local, launch_success, launch_site, static_fire_date_unix, launch_date_unix, ships } }) => {\n  //console.log(launch);\n  return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <h4> Mission:\n            <span className={classNames({\n              'text-success': launch_success,\n              'text-danger': !launch_success\n            })}>\n              {mission_name}\n            </span>\n          </h4>\n          <p> Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment> </p>\n          <p> Launch Site: {launch_site.site_name} </p>\n          <p> Launch Date Unix: {launch_date_unix} </p>\n          <p> Fire Date Unix: {static_fire_date_unix} </p>\n         \n        </div>\n        <div className=\"col-md-3\">\n            <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\"> Launch Details </Link>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default LaunchItem\n","import React from 'react'\n\nexport default function MissionKey() {\n  return (\n    <div className=\"my-3\">\n      <p>\n        <span className=\"px-3 mr-2 bg-success\" /> = Success\n      </p>\n      <p>\n        <span className=\"px-3 mr-2 bg-danger\" /> = Fail\n      </p>\n    </div>\n  )\n}\n","import React, { Component } from 'react'\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nimport LaunchItem from './LaunchItem';\nimport MissionKey from './MissionKey';\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number,\n      mission_name,\n      launch_year,\n      launch_date_local,\n      launch_site {\n        site_name\n      }\n      launch_success\n    }\n  }\n`;\n\n\nexport default class Launches extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"container\">\n          <h1 className=\"display-4 my-3\"> Launches </h1>\n          <MissionKey />\n          <Query query={LAUNCHES_QUERY}>\n            {\n              ({ loading, error, data }: boolean | string | any) => {\n                if (loading) return <h4>Loading...</h4>\n                if (error) console.log(error);\n                console.log(data);\n\n                return (\n                  <React.Fragment>\n                    {\n                      data.launches.map((launch: { flight_number: string | number | null | undefined; }) => (\n                        <LaunchItem key={launch.flight_number} launch={launch} />\n                      ))\n                    }\n                  </React.Fragment>\n                )\n              }\n            }\n          </Query>\n        </div>\n      </React.Fragment>\n    )\n  }\n}","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\nimport { RouteComponentProps } from 'react-router';\nimport classNames from 'classnames';\n\ntype Props = {\n  id: string,\n  someString: any\n};\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($id: String) {\n    launch(id: $id) {\n      flight_number,\n      mission_name,\n      launch_year,\n      launch_success,\n      launch_site {\n        site_name\n      },\n      launch_date_local,\n      rocket {\n          rocket_id,\n        rocket_name,\n        rocket_type\n      }\n    }\n  }\n`;\n\nexport class Launch extends Component<Props & RouteComponentProps> {\n\n  render() {\n    \n    let { id }: any = (this.props.match.params as any);\n    id = String(id)\n    \n    return (\n      <React.Fragment>\n        <Query query={LAUNCH_QUERY} variables={{ id }}>\n          {\n            ({ loading, error, data }: boolean | string | any) => {\n              if (loading) return <h4>Loading...</h4>\n              if (error) console.log(error);\n\n              const {\n                mission_name,\n                flight_number,\n                launch_year,\n                launch_success,\n                launch_site: { site_name },\n                rocket: { rocket_id, rocket_name, rocket_type }\n              } = data.launch;\n\n              //const { launch_failure_details: { reason } } = data.launch;\n\n              return (\n                <div>\n                  <h1 className=\"display-4 my-3\">\n                    <span className=\"text-dark\">\n                      Mission: \n                    </span>\n                    {mission_name}\n                  </h1>\n                  <h4 className=\"mb-3\"> Launch Details </h4>\n                  <ul className=\"list-group\">\n                    <li className=\"list-group-item\">\n                      Flight Number: {flight_number}\n                    </li>\n                    <li className=\"list-group-item\">\n                      Launch Year: {launch_year}\n                    </li>\n                    <li className=\"list-group-item\">\n                      Launch Successful: <span className={classNames({\n                        'text-success': launch_success,\n                        'text-danger': !launch_success\n                      })}>{launch_success ? 'Yes' : 'No'}</span>\n                    </li>\n                    <li className=\"list-group-item\">\n                      <b>Launch Site: <span> {site_name} </span></b>\n                    </li>  \n                  </ul>\n                  <h4 className=\"h4 my-3\"> Rocket Details </h4>\n                  <ul className=\"list-group\">\n                    <li className=\"list-group-item\"> Rocket ID: {rocket_id} </li>\n                    <li className=\"list-group-item\"> Rocket Name: {rocket_name} </li>\n                    <li className=\"list-group-item\"> Rocket Type: {rocket_type} </li>\n                  </ul>\n                  <hr />\n                    <Link className=\"btn btn-secondary\" to=\"/\">Back</Link>\n                </div>\n              )\n            }\n          }\n        </Query>\n      </React.Fragment>\n    )\n  }\n};\n\nexport default Launch","import React from 'react';\nimport \"./Navbar.css\"\n\nexport default function Navbar() {\n  return (\n    <div className=\"header\">\n      <ul>\n        <li><a href=\"/dragons\">Dragons</a></li>\n        <li><a href=\"/\">Launches</a></li>\n        <li><a href=\"/ships\">Ships</a></li>\n        <li><a href=\"/\">Contact</a></li>\n      </ul>\n    </div>\n  );\n}\n","import React from 'react';\n\nimport \"./Header.css\";\n\nimport Navbar from './Navbar';\nimport { Link } from 'react-router-dom';\n\nexport default function Header() {\n  return (\n    <>\n      <Navbar />\n    <div>\n      <section className=\"site-title\">\n        <div className=\"site-background\">\n          <h4 data-testid=\"spaceX\">SpaceX</h4>\n          <h1 data-testid=\"starLink\">STARLINK MISSION</h1>\n          <Link to=\"/\" className=\"btn\" data-testid=\"explore\"> Explore </Link>\n        </div>\n      </section>   \n    </div>\n    </>\n  );\n}\n","import React from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  ship: any\n}\n\nconst ShipItem: React.FC<Props> = ({ ship: { ship_id, ship_name, weight_lbs, weight_kg, home_port } }) => {\n  //console.log(launch);\n  return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <p className={classNames({\n            'text-success': ship_id\n          })}> Ship ID: {ship_id} </p>\n          <p> Ship Name: {ship_name} </p>\n          <p> Weight in KiloGram: {weight_kg} </p>\n          <p> Weight in Pounds: {weight_lbs} </p>\n          <p> Port Name: {home_port} </p>\n         \n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ShipItem\n","import React, { Component } from 'react'\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nimport ShipItem from './ShipItem';\n\nconst SHIPS_QUERY = gql`\n  query ShipsQuery {\n    ships {\n      ship_id,\n      ship_name,\n      weight_lbs,\n      weight_kg,\n      home_port\n    }\n  }\n`;\n\n\nexport default class Ships extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"container\">\n          <h1 className=\"display-4 my-3\"> Ships </h1>\n          <Query query={SHIPS_QUERY}>\n            {\n              ({ loading, error, data }: boolean | string | any) => {\n                if (loading) return <h4>Loading...</h4>\n                if (error) console.log(error);\n                console.log(data);\n\n                return (\n                  <React.Fragment>\n                    {\n                      data.ships.map((ship: { ship_id: string | number | null | undefined; }) => (\n                        <ShipItem key={ship.ship_id} ship={ship} />\n                      ))\n                    }\n                  </React.Fragment>\n                )\n              }\n            }\n          </Query>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n","import React from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  dragon: any\n}\n\nconst DragonItem: React.FC<Props> = ({ dragon: { id, name, crew_capacity } }) => {\n  //console.log(launch);\n  return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <p className={classNames({\n            'text-danger': id\n          })}> Dragon ID: {id} </p>\n          <p> Dragon Name: {name} </p>\n          <p> Crew Capacity: {crew_capacity} </p>\n         \n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default DragonItem\n","import React, { Component } from 'react'\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nimport DragonItem from './DragonItem';\n\nconst DRAGONS_QUERY = gql`\n  query ShipsQuery {\n    dragons {\n      id,\n      name,\n      crew_capacity\n    }\n  }\n`;\n\n\nexport default class Dragons extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"container\">\n          <h1 className=\"display-4 my-3\"> Dragons </h1>\n          <Query query={DRAGONS_QUERY}>\n            {\n              ({ loading, error, data }: boolean | string | any) => {\n                if (loading) return <h4>Loading...</h4>\n                if (error) console.log(error);\n                console.log(data);\n\n                return (\n                  <React.Fragment>\n                    {\n                      data.dragons.map((dragon: { id: string | number | null | undefined; }) => (\n                        <DragonItem key={dragon.id} dragon={dragon} />\n                      ))\n                    }\n                  </React.Fragment>\n                )\n              }\n            }\n          </Query>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\nimport Header from './components/Header';\nimport Ships from './components/Ships';\nimport Dragons from './components/Dragons';\n\nconst client = new ApolloClient({\n  uri: \"http://spacexdata.herokuapp.com/graphql\"\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <Header />\n        <div className=\"container\">\n          {/*<img\n            src={logo}\n            alt=\"spaceX\"\n            style={{ width: 300, display: \"block\", margin: \"auto\" }}\n          />*/}\n          <Route exact path=\"/\" component={Launches} />\n          <Route exact path=\"/launch/:id\" component={Launch} />\n          <Route exact path=\"/ships\" component={Ships} />\n          <Route exact path=\"/dragons\" component={Dragons} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}